{"version":3,"sources":["data/utils.ts","routes/Roadmap/Roadmap.tsx"],"names":["truncate","fullStr","strLen","separator","length","charsToShow","frontChars","Math","ceil","backChars","floor","substr","rawFetcher","library","abi","a","args","arg1","arg2","params","isAddress","address","method","contract","Contract","data","poolsFetcher","arg3","pools","poolPromises","i","push","Promise","all","poolBalances","balanceInPools","BigNumber","from","p","totalBalance","add","fetcher","getSigner","pairFetcher","tokenQuery","request","Roadmap","className","lg","span","offset","xs"],"mappings":"4WAIO,SAASA,EAASC,EAASC,EAAQC,GACzC,IAAKF,EAAS,MAAO,MACrB,GAAIA,EAAQG,QAAUF,EAAQ,OAAOD,EAIrC,IACCI,EAAcH,GAHfC,EAAYA,GAAa,OAEFC,OAEtBE,EAAaC,KAAKC,KAAKH,EAAc,GACrCI,EAAYF,KAAKG,MAAML,EAAc,GAEtC,OAAOJ,EAAQU,OAAO,EAAGL,GAAcH,EAAYF,EAAQU,OAAOV,EAAQG,OAASK,GAG7E,IAAMG,EAAa,SAACC,EAASC,GAAV,6BAAkB,0DAAAC,EAAA,qEAAUC,EAAV,yBAAUA,EAAV,WACpCC,EAAyBD,EADW,GAC9BE,EAAmBF,EADW,GACrBG,EAAUH,EADW,UAEvCI,oBAAUH,GAF6B,wBAGpCI,EAAUJ,EACVK,EAASJ,EACTK,EAAW,IAAIC,IAASH,EAASP,EAAKD,GALF,SAMvBU,EAASD,GAAT,MAAAC,EAAQ,YAAYJ,IANG,cAMpCM,EANoC,yBAOnCA,GAPmC,6CAY/BC,EAAe,SAACb,EAASC,GAAV,6BAAkB,sEAAAC,EAAA,qEAAUC,EAAV,yBAAUA,EAAV,WACtCC,EAAoBD,EADkB,GAChCE,EAAcF,EADkB,GAC1BW,EAAQX,EADkB,IAEzCI,oBAAUH,GAF+B,iBAQ5C,IALMI,EAAUJ,EACVK,EAASJ,EACTU,EAAQD,EACRJ,EAAW,IAAIC,IAASH,EAASP,EAAKD,GACtCgB,EAAsB,GACnBC,EAAI,EAAGA,EAAIF,EAAMxB,OAAQ0B,IACjCD,EAAaE,KAAKR,EAASD,GAAQM,EAAME,KATE,iBAWjBE,QAAQC,IAAIJ,GAXK,QAa5C,IAFMK,EAXsC,OAYxCC,EAAiBC,IAAUC,KAAK,KAC3BC,EAAI,EAAGA,EAAIJ,EAAa9B,OAAQkC,IAClCC,EAAeJ,EAAeK,IAAIN,EAAaI,IACrDH,EAAiBI,EAf0B,yBAiBrCJ,GAjBqC,6CAqBjCM,EAAU,SAAC5B,EAASC,GAAV,OAAkB,WAAc,IAAD,uBAATE,EAAS,yBAATA,EAAS,oBAC9CC,EAAyBD,EADqB,GACxCE,EAAmBF,EADqB,GAC/BG,EAAUH,EADqB,SAErD,GAAII,oBAAUH,GAAO,CACpB,IAAMI,EAAUJ,EACVK,EAASJ,EACTK,EAAW,IAAIC,IAASH,EAASP,EAAKD,EAAQ6B,aACpD,OAAOnB,EAASD,GAAT,MAAAC,EAAQ,YAAYJ,IAE5B,IAAMG,EAASL,EACf,OAAOJ,EAAQS,GAAR,MAAAT,EAAO,CAASK,GAAT,mBAAkBC,OAGpBwB,EAAc,kBAAM,SAACC,GACjC,OAAOC,kBAAQ,6DAA8DD,M,kHC5C/DE,UAdK,kBAClB,qBAAKC,UAAU,eAAf,SACE,qBAAKA,UAAU,oCAAf,SACE,cAAC,IAAD,CAAKA,UAAU,qBAAf,SACE,eAAC,IAAD,CAAKC,GAAI,CAAEC,KAAM,GAAIC,OAAQ,GAAKC,GAAI,CAAEF,KAAM,IAA9C,UACE,oBAAIF,UAAU,gBAAd,6BACA,cAAC,IAAD","file":"static/js/15.44265100.chunk.js","sourcesContent":["import { Contract, BigNumber } from 'ethers';\nimport { isAddress } from 'ethers/lib/utils';\nimport { request } from 'graphql-request';\n\nexport function truncate(fullStr, strLen, separator) {\n\tif (!fullStr) return \"...\";\n\tif (fullStr.length <= strLen) return fullStr;\n\n\tseparator = separator || '...';\n\n\tvar sepLen = separator.length,\n\t\tcharsToShow = strLen - sepLen,\n\t\tfrontChars = Math.ceil(charsToShow / 2),\n\t\tbackChars = Math.floor(charsToShow / 2);\n\n\treturn fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n}\n\nexport const rawFetcher = (library, abi) => async (...args) => {\n\tconst [arg1, arg2, ...params] = args;\n\tif (isAddress(arg1)) {\n\t\tconst address = arg1;\n\t\tconst method = arg2;\n\t\tconst contract = new Contract(address, abi, library);\n\t\tconst data = await contract[method](...params);\n\t\treturn data;\n\t}\n};\n\n\nexport const poolsFetcher = (library, abi) => async (...args) => {\n\tconst [arg1, arg2, arg3] = args;\n\tif (isAddress(arg1)) {\n\t\tconst address = arg1;\n\t\tconst method = arg2;\n\t\tconst pools = arg3;\n\t\tconst contract = new Contract(address, abi, library);\n\t\tconst poolPromises: any[] = [];\n\t\tfor (var i = 0; i < pools.length; i++) {\n\t\t\tpoolPromises.push(contract[method](pools[i]));\n\t\t}\n\t\tconst poolBalances = await Promise.all(poolPromises);\n\t\tlet balanceInPools = BigNumber.from(\"0\");\n\t\tfor (var p = 0; p < poolBalances.length; p++) {\n\t\t\tconst totalBalance = balanceInPools.add(poolBalances[p]);\n\t\t\tbalanceInPools = totalBalance;\n\t\t}\n\t\treturn balanceInPools;\n\t}\n};\n\nexport const fetcher = (library, abi) => (...args) => {\n\tconst [arg1, arg2, ...params] = args;\n\tif (isAddress(arg1)) {\n\t\tconst address = arg1;\n\t\tconst method = arg2;\n\t\tconst contract = new Contract(address, abi, library.getSigner());\n\t\treturn contract[method](...params);\n\t}\n\tconst method = arg1;\n\treturn library[method](arg2, ...params);\n};\n\nexport const pairFetcher = () => (tokenQuery) => {\n\treturn request('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2', tokenQuery)\n};\n","import React, { FC } from 'react';\nimport { Row, Col } from 'antd';\nimport { Roadmap as RoadmapComponent } from '../../components';\n\nimport './Roadmap.scss';\n\nconst Roadmap: FC = () => (\n  <div className=\"Roadmap Page\">\n    <div className=\"Section__wrapper Section__roadmap\">\n      <Row className=\"Section__container\">\n        <Col lg={{ span: 14, offset: 5 }} xs={{ span: 24 }}>\n          <h2 className=\"text-centered\">Project roadmap</h2>\n          <RoadmapComponent />\n        </Col>\n      </Row>\n    </div>\n  </div>\n  \n);\n\nexport default Roadmap;"],"sourceRoot":""}